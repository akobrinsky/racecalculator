type Query {
  user(id: Int): User
  race(id: Int): Race
}

"""A user who loves to run"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """The name of the user"""
  username: String
  email: String
  password: String

  """The races for a specific user"""
  races(after: String, first: Int, before: String, last: Int): RaceConnection

  """The goals for a specific user"""
  goals(after: String, first: Int, before: String, last: Int): GoalConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type RaceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RaceEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type RaceEdge {
  """The item at the end of the edge"""
  node: Race

  """A cursor for use in pagination"""
  cursor: String!
}

"""A race for a specific user"""
type Race implements Node {
  """The ID of an object"""
  id: ID!
  date: String
  type: String
  time: String
  userId: Int
  user: User
}

"""A connection to a list of items."""
type GoalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GoalEdge]
}

"""An edge in a connection."""
type GoalEdge {
  """The item at the end of the edge"""
  node: Goal

  """A cursor for use in pagination"""
  cursor: String!
}

"""A runner's goal"""
type Goal implements Node {
  """The ID of an object"""
  id: ID!

  """Type of race, i.e. 5k, 10, half-marathon..."""
  type: String
  userId: String
  time: String
  user: User
}

type Mutation {
  addRace(input: addRaceInput!): addRacePayload
  deleteRace(input: deleteRaceInput!): deleteRacePayload
  editRace(input: editRaceInput!): editRacePayload
}

type addRacePayload {
  race: Race
  user: User
  clientMutationId: String
}

input addRaceInput {
  type: String!
  date: String!
  time: String!
  userId: Int!
  clientMutationId: String
}

type deleteRacePayload {
  deletedRaceId: Race
  user: User
  clientMutationId: String
}

input deleteRaceInput {
  id: Int!
  userId: Int!
  clientMutationId: String
}

type editRacePayload {
  editedRace: Race
  user: User
  clientMutationId: String
}

input editRaceInput {
  id: Int!
  userId: Int!
  type: String!
  date: String!
  time: String!
  clientMutationId: String
}
